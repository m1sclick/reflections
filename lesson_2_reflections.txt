- What happens when you initialize a repository? Why do you need to do it?
  When you initialize a repository with git init command git creates new hidden folder .git that has log file and other supporting files, it will not make any commits to a repository. You need to do this because without this you will not be able to call you folder git repository, and no git commands will work with it.
- How is the staging area different from the working directory and the repository? What value do you think it offers?
  Staging area is like a buffer between working directory and repository, it stores changes you want to make to the repository but still don't want to commit because of some circumstances. I think it offers more control over commits, it gives you the possibility to choose what files will be added to repository rather of all files with commit command.
- How can you use the staging area to make sure you have one commit per logical change?
  With staging area and git diff command you can always take a look at what exact changes you've made without committing them.  This will help you make sure that you are committing only one logical change at a time if you forget what files you are already included into the staging area.
- What are some situations when branches would be helpful in keeping your history organized? How would branches help?
  Branches really helpful when you want to add a new feature or something that changes how things works radically. For example, if you want to try new experimental search algorithm, but you don't want to implement it on the main version because it can fail, right thing will be adding new branch and implementing feature there until it works flawlessly and then merge with main. This also will help you when while working on new feature you still wanna fix small bugs in master branch, because two versions run simultaneously and you can merge them any time.
- How do the diagrams help you visualize the branch structure?
  With diagrams you can see parent commits for every commit, you also can see what commits are unreachable and where branches separates.
- What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
  The result of merging two branches will be another - new branch which will include changes made but both this branches combined. It will have both parent branches from branches that were merged and that's why we represent them in the diagram that way.
- What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
  For pros to making merges manually I will put that with that type you can better control which code will be included but you will loose a lot of time doing this. On the other hand Git's auto merging will merge all your code fast and efficient, and probably with the same algorithm you will use manually, and also if there is a conflict it will warn you so you will be safe.
